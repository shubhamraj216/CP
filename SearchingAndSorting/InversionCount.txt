#include<bits/stdc++.h>
using namespace std;
#define MAXN 100005
long long merge(int l,int m,int r,int A[])
{
//     int n1=m-l+1;
//     int n2=r-m;
//     int i,j,k;
//     int a[n1],b[n2];
//     long long c=0;
//     for(i=0;i<n1;i++)
//     {
//         a[i]=A[l+i];
//     }
//     for(j=0;j<n2;j++)
//     {
//         b[j]=A[m+j+1];
//     }
//     i=0;j=0;k=l;
//     while(i<n1 && j<n2)
//     {
//         if(a[i]<=b[j])
//         {
//             A[k++]=a[i++];

//         }
//         else
//         { 
//             A[k++]=b[j++]; 

//             c=c+1+m-i;
//         } 

//     }
//     while(i < n1)
//     {
//         A[k++] = a[i++];

//     }
//     while (j < n2) 
//     { 
//         A[k++] = b[j++]; 
 
//     }

    
//     return c;
    int i=l,j=m,k=0;
    int temp[r-l+1];
    long long c=0;
    while(i<m && j<=r)
    {
        if(A[i]<=A[j])
        {
            temp[k++]=A[i++];
        }
        else
        {
            temp[k++]=A[j++];
            c+=m-i;
        }
    }
    while(i<m){
        temp[k++]=A[i++];
    }
    while(j<=r){
        temp[k++]=A[j++];
    }
    for(int i=l,k=0;i<=r;i++,k++){
        A[i]=temp[k];
    }
    return c;

}

long long merge_sort(int l,int r,int A[])
{
    long long c=0;
    if(l<r)
    {
        int m=(r+l)/2;
        long long lc=merge_sort(l,m,A);
        long long rc=merge_sort(m+1,r,A);
        long long mc=merge(l,m+1,r,A);
        return lc+rc+mc;
    }
    else{
        return c;
    }
}

long long solve(int A[], int n)
{
	// Write your code here.
    long long ans=merge_sort(0,n-1,A);
    return ans;
}
int main()
{
	int n,A[MAXN];
	cin>>n;
	for(int i = 0; i < n ; i++){
		cin>>A[i];
	}
	cout<<solve(A,n)<<endl;
}
