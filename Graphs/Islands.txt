#include<bits/stdc++.h>
using namespace std;

queue<int>mq;
int z=0;
void BFS(int** edges, int sv, int n, bool* visited){
    if(!mq.empty()){
        mq.pop();
    }else{
        return;
    }
    
    for(int i=1;i<n;i++){
        if(edges[sv][i]==1 && !visited[i]){
            mq.push(i);
            visited[i]=true;
        }
    }
    BFS(edges, mq.front(), n, visited);
}
int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
    int** edges=new int*[n+1];
    for(int i=0;i<n+1;i++){
        edges[i]=new int[n+1];
        for(int j=0;j<n+1;j++){
            edges[i][j]=0;
        }
    }
    bool* visited=new bool[n+1];
    for(int i=1;i<=n;i++){
        visited[i]=false;
    }
    for(int i=0;i<u.size();i++){
        edges[u[i]][v[i]]=1;
        edges[v[i]][u[i]]=1;
    }
    // if(u.size()!=0){
    //     mq.push(1);
    // }
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            z++;
            mq.push(i);
            BFS(edges, i, n+1, visited);
        }
    }
    return z;
}

int main()
{
	int n,m;
	vector<int>u,v;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		u.push_back(x);
	}
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		v.push_back(x);
	}
	cout<<solve(n,m,u,v)<<endl;
}
