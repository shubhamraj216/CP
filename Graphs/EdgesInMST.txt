#include <bits/stdc++.h>
using namespace std;
const int maxn=100007;
int n,m;
int par[maxn],siz[maxn];
vector<int> neigh[maxn],id[maxn];
set<int> A;
int cur, mn[maxn];
int a[maxn],b[maxn],w[maxn];
int s[maxn],res[maxn];
bool Less(int a,int b){
    return w[a]<w[b];
}
int find_Par(int x){return (par[x]<0) ? x : par[x]=find_Par(par[x]);}
void findBridges(int v,int p,int ind){
    if(mn[v]) return;
    int st=++cur;
    mn[v]=st;
    for(int i=0 ; i<neigh[v].size() ; i++){
        int u=neigh[v][i];
        if(u==p && id[v][i]==ind)continue;
        findBridges(u,v,id[v][i]);
        mn[v]=min(mn[v],mn[u]);
    }
    if(p && mn[v]==st){
		res[ind]=1;
	}
}
int main(){
    cin>>n>>m;
    for(int i=0 ; i<m ; i++){
        cin>>a[i]>>b[i]>>w[i];
        s[i]=i;
    }
    memset(par,-1,sizeof par);
    sort(s,s+m,Less);
    int j=0;
    for(int i=1 ; i<=1000000 ; i++){
        while(j<m && w[s[j]]<i) j++;
        if(j==m || w[s[j]]>i)continue;
        A.clear();
        for(int l=j ; l<m && w[s[l]]==i ; l++) {
            int e=s[l];
            int u1=find_Par(a[e]);
			int u2=find_Par(b[e]);
            if(u1==u2) res[s[l]]=-1;
            else{
                if(A.find(u1)==A.end()){
					neigh[u1].clear();
					id[u1].clear();
					A.insert(u1);
					mn[u1]=0; 
				}
                if(A.find(u2)==A.end()){ 
					neigh[u2].clear();
					id[u2].clear();
					A.insert(u2); 
					mn[u2]=0; 
				}
                neigh[u1].push_back(u2); 
				id[u1].push_back(e);
                neigh[u2].push_back(u1); 
				id[u2].push_back(e);
            }
        }
        cur=0;
        if(!A.empty())
            for(set<int>::iterator it=A.begin() ; it!=A.end() ; it++) findBridges(*it,0,-1);
        for(int l=j ; l<m && w[s[l]]==i ; l++){
            int e=s[l];
            int u1=find_Par(a[e]);
			int u2=find_Par(b[e]);
			if(u1==u2)continue;
            if(par[u1]>par[u2])swap(u1,u2);
			par[u1]+=par[u2];
			par[u2]=u1;
        }
    }
	string tt[]={"none","at least one","any"};
    for(int i=0 ; i<m ; i++){
        cout<<tt[res[i]+1]<<endl;
    }
    return 0;
}
